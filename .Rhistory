install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library("swirl")
swirl()
5 + 35
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- (z - 1)^2
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
bye()
library("Swirl")
library("swirl")
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(1,my_seq)
seq(1, length(my_seq))
?seq
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
x <- c(0.5, 55, -10, 6)
c(0.5,55,-10,6)
info()
num_vect <- c(0.5,55,-10,6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name", "is")
my_char
paste(my_chair, collapse = "")
paste(my_char, collapse="")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Vira")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste( c(1:3), c("X","Y","Z"), sep = "")
paste (LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myO_data <- sample(c(y,z), 100)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x [ c(3,5,7)]
x[0]
x[3000]
x[x(-2, -10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect["foo"] )
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix?
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vest)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply_flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(uniqe_vals, length)
sapply(unique_vals, length)
sa;;ly(unique_vals, unique)
sapply(unique_vals, unique)
sapply(flags, unique)
play()
nxt()
skip
skip()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(pllants, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = true)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample (1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), prob = c(0.3, 0,7), replace = TRUE)
flips <- sample(c(0,1), prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 ,| A binomial random variable represents the number of 'successes' (heads) in a
| given number of independent 'trials' (coin flips). Therefore, we can
| generate a single random variable that represents the number of heads in 100
| flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that
| you only specify the probability of 'success' (heads) and NOT the
| probability of 'failure' (tails). Try it now.
> rbinom(1, size = 100, prob = 0.7)
[1] 71
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(10)
rpois(10, lambda)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSTIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t1,t2)
unclass(t1)
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
mt <- cbind(x,y)
class(mt)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
x
y <- 2
y
tr <-  x + y
tr
class(tr)
x <- c(3, 5, 1, 10, 12, 6)
x
x[x>6] <-0
x
ozone <- load.csv(hw1_data.csv)
ozone <- read.csv(hw1_data.csv)
ozone <- read.csv("hw1_data.csv")
read.csv("hw1_data.csv")
ls
ls()
wd()
getwd()
ozone <- read.csv("hw1_data.csv")
head(ozone,10)
nrow(ozone)
tail(ozone, 2)
ozone[47]
ozone[47,]
ozone$Ozone
bad <-is.na(ozone$Ozone)
bad
ozoneCol <- ozone$Ozone
length(ozoneCol)
badDt <- is.na(ozoneCol)
ozoneCol[!badDt]
goodOzone <- ozoneCol[!badDt]
goodOzone
length(goodOzone)
mean(goodOzone)
good <- complete.cases(ozone$Ozone, ozone$Temp)
good
goodOzone <- ozone[goodOzome]
goodOzone <- ozone[good]
ozone
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
xy <- cbind(x, y)
xy
x <- list(2, "a", "b", TRUE).
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2
me <- x + y
me
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>10] <- 4
x
add2 <- function(x, y)
{
x + y
}
add2(3,5)
above <- function(x, n)
{
use <- x>n
x[use]
}
above (x,4)
above10 <- function(x)
{
use <- x > 10
x[use]
}
> above <- function(x, n=10)
+ {
+   use <- x>n
+   x[use]
+ }
above <- function(x, n=10)
{
use <- x>n
x[use]
}
above (x)
above(x,3)
columnmean <- function(y)
{
nc <- ncol(y)
means <- numeric(nc)  ## initially an empty vector
for(i in 1:nc)
{
means[i] <- mean(y[, i])
}
means  ## this is what returns
}
columnmean(ozone)
columnmean <- function(y, removeNA = true)
{
nc <- ncol(y)
means <- numeric(nc)  ## initially an empty vector
for(i in 1:nc)
{
means[i] <- mean(y[, i], na.rm = removeNA)
}
means  ## this is what returns
}
columnmean(ozone)
columnmean <- function(y, removeNA = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)  ## initially an empty vector
for(i in 1:nc)
{
means[i] <- mean(y[, i], na.rm = removeNA)
}
means  ## this is what returns
}
columnmean(ozone)
X <- 1:10
if(X > 5)
{}
x <- 1:10
if (x>5)
{}
f <- function(x)
{
g <- function(y)
{
y+z
}
z <-4
x + g(x)
}
}
f <- function(x)
{
g <- function(y)
{
y+z
}
z <-4
x + g(x)
}
z <-10
f(3)
x <-5
y <- if(x < 3)
{}
x <-5
y <- if (x < 3){}
install.packages("RMySQL")
library(RMySQL)
con &lt;- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="root", password="sAfty1st!", dbname="vira_test")
library(RMySQL)con &lt;- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="root", password="sAfty1st!", dbname="vira_test")
dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="root", password="sAfty1st!", dbname="vira_test")
con &lt;
mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A
mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg16", host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbListFields(hg19, "HInvGeneMrna")
dbGetQuery(hg19, "select count(*) FROM HInvGeneMrna")
hinvGeneMrna <- dbReadTable(hg19, "HInvGeneMrna")
head(hinvGeneMrna)
dbDisconnect(ucscDb);
dbDisconnect(ucscDb);
soure("http://biococonductor.org/biocLite.R")
source("http://biococonductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
DiocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
rm(list=ls())
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
datasetURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(datasetURL, destfile<-"communitysurvery.csv")
asc <-read.csv("communitysurver.csv")
asc <-read.csv("communitysurvey.csv")
asc <-read.csv("communitysurvery.csv")
mysubset <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
mysubset <- sqldf("select pwgtp1 from acs where AGEP < 50")
asc <-read.file("communitysurvery.csv")
rm(list=ls())
library(sqldf)
asc <-read.csv("communitysurvery.csv")
mysubset <- sqldf("select pwgtp1 from acs where AGEP < 50")
rm(list=ls())
datasetURL<-"http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(fileUrl , useInternal=TRUE)
library(XML)
doc <- htmlTreeParse(fileUrl , useInternal=TRUE)
fileURL<-"http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(fileUrl , useInternal=TRUE)
doc <- htmlTreeParse(fileURL , useInternal=TRUE)
doc
doc(2,)
doc[2,]
capture.output(doc[10])
doc[10]
capture.output(doc)[10]
line10 <- capture.output(doc)[10]
nchar(line10)
line9 <- "<meta name="Distribution" content="Global" />"
line9 <- "<meta name="Distribution" content="Global" />"
capture.output(doc)[7]
line7 <- capture.output(doc)[7]
nchar(line7)
line7
capture.output(doc)[17]
capture.output(doc)[18]
exit
quit
quit()
library(plyr)
x_train <- read.table("train/X_train.txt")
setwd("~/GitHub/RepData_PeerAssessment1")
tidy <- read.csv("activity.csv",
header=TRUE,   sep=",",
colClasses=c("numeric", "character", "numeric"))
tidy
str(tidy)
setwd("~/GitHub/RepData_PeerAssessment1")
install.packages("rmarkdown")
